FlexGUI help
=============

Menus
----

### File

The File menu should be pretty self explanatory. You can create a new
file in a new tab with "New File" or open an existing file with "Open Spin
file...". If you use "Open file..." with the current tab holding
an empty, unmodified new file, the file will be opened in that tab,
otherwise it will be opened in a new tab.

The default configuration always creates a listing file (.lst), which
you can load into a window by selecting "Open Listing File" under the
File menu. If the listing file window is open it will
automatically be updated on every recompile.

The "Library directories..." entry allows you to pick a directories that
will be searched for OBJ declarations and include files automatically.
The directories are searched in the order in which they are listed.

"Close tab" closes the currently selected tab.

"Exit" exits the program.

### Edit

The Edit menu is again pretty self-explanatory. The Undo/Redo
functionality is quite limited; only one level of Redo is reliable,
and trying to Redo again will produce unpredictable results.

### Options

The Options menu lets you change compiler and editor options. For now
just the optimization level can be changed. The default optimization
level is probably suitable for most purposes.

"No Optimization" is only recommended for checking for compiler
bugs (if the program works with no optimization but fails with
optimization enabled, then either there's a timing issue or a compiler
bug).

"Full Optimization" may produce faster code, but it will typically
consume more resources (including COG memory).

The "Editor Options..." dialog allows you to change the way the source
code editor looks, e.g. changing the font used for the text, or the
tab settings. It also lets you change the font used for the compiler
output window, and has an option to automatically load files changed
by external programs (normally flexgui will prompt you to reload if
it notices a change).

### Commands

The Commands menu allow you to compile, run a binary, or both compile
and run. The current file (the one in the currently selected tab) is
always the one compiled, so it should be your top level file. It
will be saved automatically before any compilation.

"Run Binary on device..." allows you to choose a binary that you
compiled off-line (or that was compiled earlier) and run it on the
device.

"Compile and Flash" and "Flash binary file..." are like the run
options, but program the binary into the device. The default is to
program the device's SPI flash. For P2 boards, the exact program to
use for flashing may be selected with the "Choose P2 flash program..."
menu. For example, choosing "P2ES_sdcard.bin" will cause the binary
to be placed on an SD card instead of in the SPI flash.

### Serial

Presents a menu of serial port speeds and ports that may be selected.
The default is to tell the loader program (loadp2 or proploader) to
scan for a port to use. But you may override this by selecting a
specific serial port.

If for some reason the port you wish to use is not listed (this may
happen on Mac OS X, for example) then you can still override
the port by configuring the command manually (using the Commands >
Configure Commands... menu). In the "Run command" replace `%P` with
`-p COM20` or `-p /dev/tty.usbmodem123` (or whatever the port you wish
to use is).

### Special

The `Special` menu presents some options for interacting with P2
boards.

#### Enter P2 ROM TAQOZ

Opens a terminal window connected to the version of Peter Jakacki's
Forth interpreter TAQOZ that is built into the P2 ROM.

#### Load current buffer into TAQOZ

Like "Enter P2 ROM TAQOZ", but after TAQOZ is started the text in the
currently selected editor window is downloaded to TAQOZ as if the
user had typed it.

#### Run uPython on P2

Runs the microPython interpreter on the P2. This is loaded from the
`samples/upython` directory.

#### Load current buffer into uPython

Like "Run uPython on P2", but after microPython is started the text in the
currently selected editor window is downloaded to the P2 as if the
user had typed it.

#### Run proplisp on P2

Runs a Lisp interpreter on the P2. This is loaded from the
`samples/proplisp` directory.

#### Load current buffer into proplisp

Like "Run proplisp on P2", but after Lisp is started the text in the
currently selected editor window is downloaded to the P2 as if the
user had typed it.

#### Enter ROM Monitor

Opens a terminal window connected to the built in P2 ROM debug monitor.

#### Terminal only

Opens a terminal window. Does not scan for a P2, so the port to use must
be explicitly set in the `Port` menu.

Configuring Commands
--------------------

You can change the commands used for compiling and running
programs. Since the commands are flexible, you can acutally use
flexgui for compiling and running programs on the P1. The "P1
defaults" button sets the commands for this (you will need to supply
propeller-load.exe yourself). "P2b defaults" restores the settings to
the original Prop2 development. Use "P2a defaults" if you have an
old (revision A) board.

Config File
-----------
Settings for flexgui are saved in a file called ".flexgui.config" in
the HOME directory of the user (usually something like
C:\Users\MyName). If something gets really messed up, deleting that
file will restore flexgui to its default state.

